// AF_WebService.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "AF_WebService.h"
#include "AF_WebServiceDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CAF_WebServiceApp

BEGIN_MESSAGE_MAP(CAF_WebServiceApp, CWinApp)
	ON_COMMAND(ID_HELP, CWinApp::OnHelp)
END_MESSAGE_MAP()


// CAF_WebServiceApp 构造

CAF_WebServiceApp::CAF_WebServiceApp()
{
	// TODO: 在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中
}


// 唯一的一个 CAF_WebServiceApp 对象

CAF_WebServiceApp theApp;
HANDLE g_hSingleton = NULL;

// CAF_WebServiceApp 初始化

BOOL CAF_WebServiceApp::InitInstance()
{
	//判断实例唯一性，一台计算机只允许开启一个WEB服务节点程序
	DWORD dwProcessId = GetCurrentProcessId();
	if(IsExist("AF_WebService",dwProcessId))
	{
		return FALSE;
	}

	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControls()。否则，将无法创建窗口。
	InitCommonControls();

	CWinApp::InitInstance();

	AfxEnableControlContainer();

	// 标准初始化
	// 如果未使用这些功能并希望减小
	// 最终可执行文件的大小，则应移除下列
	// 不需要的特定初始化例程
	// 更改用于存储设置的注册表项
	// TODO: 应适当修改该字符串，
	// 例如修改为公司或组织名
	SetRegistryKey(_T("应用程序向导生成的本地应用程序"));

	//m_YxPlatform.YxPlatform_Install("YxDFS-DataNode");

	CAF_WebServiceDlg dlg;
	m_pMainWnd = &dlg;
	INT_PTR nResponse = dlg.DoModal();
	if (nResponse == IDOK)
	{
		// TODO: 在此放置处理何时用“确定”来关闭
		//对话框的代码
	}
	else if (nResponse == IDCANCEL)
	{
		// TODO: 在此放置处理何时用“取消”来关闭
		//对话框的代码
	}

	// 由于对话框已关闭，所以将返回 FALSE 以便退出应用程序，
	// 而不是启动应用程序的消息泵。
	return FALSE;
}

BOOL CAF_WebServiceApp::IsExist(const CString &strExeName, const DWORD dwProcessId)
{
	HANDLE v_Snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0);
	if(NULL == v_Snapshot)
	{
		CloseHandle(v_Snapshot);
		return	FALSE;
	}

	CString v_strExeName;
	v_strExeName.Format("%s.exe",strExeName);

	PROCESSENTRY32	processinfo;
	processinfo.dwSize = sizeof(PROCESSENTRY32);
	BOOL status = Process32First(v_Snapshot,&processinfo);
	while(status)
	{
		if( (0 == v_strExeName.CompareNoCase(processinfo.szExeFile))
			&& (processinfo.th32ProcessID != dwProcessId) )
		{
			CloseHandle(v_Snapshot);
			return TRUE;
		}

		status = Process32Next(v_Snapshot,&processinfo);
	}

	CloseHandle(v_Snapshot);

	g_hSingleton = CreateMutex(NULL, FALSE, v_strExeName);
	DWORD dwErrCode = GetLastError();
	if (dwErrCode == ERROR_ALREADY_EXISTS || dwErrCode == ERROR_INVALID_HANDLE)
	{
		return TRUE;
	}

	return FALSE;
}
